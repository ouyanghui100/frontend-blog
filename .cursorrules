# Cursor Rules for Frontend Blog Project

## 项目概述
这是一个基于 React + TypeScript + Ant Design + Tailwind CSS 的后台管理系统项目。

## 技术栈
- React 19
- TypeScript
- Ant Design (antd)
- Tailwind CSS
- Sass/SCSS
- Vite

## 编码规范

### 1. 代码风格
- 使用 TypeScript 编写所有新代码
- 代码结束不带分号 (;)
- 使用 2 个空格进行缩进
- 使用单引号 (') 而不是双引号 (")
- 优先使用 async/await 而不是回调函数
- 遵循《代码整洁之道》原则

### 2. 组件规范
- 组件命名使用大驼峰命名法：`MyComponent`
- 组件文件名使用大驼峰命名法：`MyComponent.tsx`
- 组件导出使用大驼峰命名法：`export default MyComponent`
- 组件引用使用大驼峰命名法：`import MyComponent from './MyComponent'`

### 3. 样式规范
- 主要使用 Tailwind CSS 类名
- 复杂样式使用 Sass/SCSS 编写
- 图片资源使用 import 引入

### 4. 文件结构
```
src/
├── components/          # 通用组件
├── views/              # 页面组件
├── hooks/              # 自定义 hooks
├── utils/              # 工具函数
├── types/              # TypeScript 类型定义
├── assets/             # 静态资源
├── styles/             # 样式文件
└── services/           # API 服务
```

### 5. 错误处理
- 编写完善的错误处理逻辑
- 使用 try-catch 块处理异步操作
- 提供用户友好的错误提示

### 6. Git 提交规范
提交信息格式：`<类型>(<范围>): <主题>`

类型说明：
- `feat`: 新功能
- `fix`: 修复问题
- `docs`: 文档更新
- `style`: 代码格式化
- `refactor`: 重构代码
- `test`: 测试相关
- `chore`: 构建过程或辅助工具的变动
- `perf`: 性能优化
- `ci`: 持续集成
- `build`: 构建系统

示例：`feat(用户模块): 添加用户注册功能`

## 开发指导

### 1. 组件开发
- 优先使用函数组件和 React Hooks
- 使用 TypeScript 接口定义 props 类型
- 组件应该职责单一，可复用
- 使用 React.memo 优化性能（当需要时）

### 2. 状态管理
- 简单状态使用 useState
- 复杂状态使用 useReducer
- 全局状态考虑使用 Context API 或状态管理库

### 3. 样式开发
- 优先使用 Tailwind CSS 工具类
- 复杂样式使用 Sass 变量和 mixins
- 保持样式的一致性和可维护性

### 4. API 调用
- 使用 axios 进行 API 调用
- 统一错误处理
- 使用 TypeScript 定义 API 响应类型

## 代码质量
- 使用 ESLint 和 Prettier 保持代码质量
- 遵循 React 最佳实践
- 保持代码的可读性和可维护性

## 性能优化
- 使用 React.lazy 进行代码分割
- 合理使用 useMemo 和 useCallback
- 优化图片加载
- 减少不必要的重渲染